{#
carranca\templates\layouts\grid.html
---------------------------------

Managed & Displays grids
Used by:
carranca\templates\private
- profile_mgmt.html.j2

mgd
#}

{% set dlg_var_close= true %}
{% set dlg_var_ok_text = "Salvar" %}
{% set dlg_var_vCentered= true %}
{% set dlg_cls_header= 'formHeader' %}
{% set dlg_cls_title= 'formTitle' %}
{% set dlg_cls_size= 'modal-xl' %} {# Size: sm, <>, lg, xl #}

    {% set dlg_cls_top= 'mt-6' %}
    {% set dlg_cls_footer= '' %} {# collapse, #}
    {% set dlg_js_frm= '' %}

    {% extends "./layouts/dialog.html.j2" %}

    {% block base_blc_head_js %}
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    {% endblock base_blc_head_js %}
    {% block base_blc_head_css %}
    <style>
        .item-exist {
            background: coral;
        }

        .item-remove {
            color: firebrick;
        }

        .item-none {
            color: darkgrey;
        }

        .column_sep_new {
            background-color: azure;
        }
    </style>
    {% endblock base_blc_head_css %}

    {% block dlg_blc_body %}
    <div id="grid_container" class="ag-theme-quartz" style="height: 500px"></div>

    {% endblock dlg_blc_body %}
    {% block dlg_blc_footer_left %}
    <button type="button" onclick="grid_add()" class="btn btn-primary">{{(dlg_var_add_text |
        default("Adicionar"))}}</button>
    <button type="button" onclick="grid_edit()" class="btn btn-primary">{{(dlg_var_edit_text |
        default("Editar"))}}</button>
    {% endblock dlg_blc_footer_left %}
    {% block dlg_blc_javascript %}
    <script>
        const itemNone = '{{ itemNone }}';
        const itemRemove = '{{ itemRemove }}';
        const usersSep = {{ usersSep | tojson }};
        const usedList = usersSep.map(item => item.sep)
        const initialList = {{ sepList | tojson }};
        const ignoreList = [itemRemove, itemNone]
        const col_sep_new = 'sep_new'
        let activeRow = null
        let addedItems = []
        let selectList = [...initialList];
        let assignedList = []
        window.addEventListener('beforeunload', (event) => {
            if (assignedList.length > 0) {
                event.preventDefault();
                event.returnValue = '';
            }
        });

        const sortList = (lst, newItem) => {
            if (newItem != null) { lst.push(newItem) }
            lst.sort((a, b) => a.localeCompare(b));
            return lst;
        };
        const need_refresh = (api, value) => {
            if (assignedList.includes(value)) {
                setTimeout(() => { api.refreshCells({ columns: ['sep'], force: true }) }, 0)
            }
        };
        const gridOptions = {
            //rowSelection: 'single'
            onCellFocused: (event) => { activeRow = (event.rowIndex === null) ? null : api.getDisplayedRowAtIndex(event.rowIndex); }
            , rowData: usersSep
            , columnDefs: [
                { field: "id", flex: 1, hide: true },
                { field: "name", headerName: "Sectorista", flex: 1 },
                {
                    field: "sep",
                    headerName: "SEP Atual",
                    flex: 2,
                    cellClassRules: {
                        'item-none': params => params.value === itemNone,
                        'item-exist': params => { return assignedList.includes(params.value); }
                    },
                },
                {
                    field: col_sep_new,
                    headerName: "Novo SEP",
                    flex: 2,
                    editable: true,
                    cellClass: 'column_sep_new',
                    cellClassRules: {
                        'item-none': params => params.value === itemNone,
                        'item-remove': params => params.value === itemRemove,
                    },
                    cellEditor: 'agSelectCellEditor',
                    cellEditorParams: params => {
                        let lst = [...selectList]
                        if (!lst.includes(params.value) && !ignoreList.includes(params.value)) {
                            lst.push(params.value)
                        }
                        lst = sortList(lst).concat(ignoreList)
                        return { values: lst };
                    },
                    valueSetter: (params) => {
                        const oldValue = params.oldValue;
                        const newValue = params.newValue;
                        if (newValue === oldValue) return false;

                        if (!ignoreList.includes(oldValue)) {
                            selectList.push(oldValue)
                            need_refresh(params.api, oldValue) // remove back-color
                            assignedList = assignedList.filter(item => item !== oldValue);
                        }
                        if (!ignoreList.includes(newValue)) {
                            selectList = selectList.filter(item => item !== newValue);
                            assignedList.push(newValue)
                            need_refresh(params.api, newValue) // set back-color
                        }
                        params.data.sep_new = newValue;
                        return true;
                    }
                },
                { field: "when", headerName: "Atribuído", flex: 1 }
            ]
        }; // gridOptions

        toLowerPlus = (str) => str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        exist_sep = (item) => {
            _item = toLowerPlus(item).trim()
            lst = initialList.concat(ignoreList).concat(addedItems);
            const exits = lst.filter(a => toLowerPlus(a) === _item);
            return exits.length > 0
        }

        const trim_it = (item) => ((item == null) || (item.trim() === '')) ? '' : item.trim()
        const item_add = (sep_new) => {
            result = false;
            if (sep_new == '') {
                // ignore
            } else if (exist_sep(sep_new)) {
                alert(`O nome '${sep_new}' já está na lista.`);
            } else {
                sortList(addedItems, sep_new);
                sortList(selectList, sep_new);
                activeRow.data[col_sep_new] = sep_new
                api.refreshCells({ rowIndex: activeRow.rowIndex, force: true })
                result = true;
            }
            return result;
        }
        const grid_add = () => {
            let sep_new = trim_it(prompt('Informe o nome do SEP a ser adicionado'))
            item_add(sep_new)
        }
        const grid_edit = () => {
            const celllValue = trim_it(activeRow == null ? null : activeRow.data[col_sep_new]);
            if (celllValue == '') {
                alert('Clique na coluna [Novo SEP] da linha que contém o novo SEP novo que deseja editar.')
            } else if (initialList.includes(celllValue) || ignoreList.includes(celllValue)) {
                alert('Somente SEP adicionados podem ser editados.')
            } else {
                let sep_new = trim_it(prompt('Informe o nome do SEP (branco para remover)', celllValue))
                if (sep_new !== celllValue) {
                    // remove old
                    selectList = selectList.filter(item => item !== celllValue);
                    addedItems = addedItems.filter(item => item !== celllValue);
                    item_add(sep_new)
                }
            }
        }
        const myGridElement = document.querySelector('#grid_container');
        api = agGrid.createGrid(myGridElement, gridOptions);
    </script>
    {% endblock dlg_blc_javascript %}

    {# eof #}