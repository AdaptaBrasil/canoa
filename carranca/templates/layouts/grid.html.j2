{#carranca\templates\layouts\grid.html
---------------------------------

Managed & Displays grids
Used by:
carranca\templates\

mgd
#}

{% set dlg_var_close= true %}
{% set dlg_var_ok_text = "Salvar" %}
{% set dlg_var_vCentered= true %}
{% set dlg_cls_header= 'formHeader' %}
{% set dlg_cls_title= 'formTitle' %}
{% set dlg_cls_size= 'modal-xl' %} {# Size: sm, <>, lg, xl #}
    {% set dlg_cls_top= 'mt-6' %}
    {% set dlg_cls_footer= '' %} {# collapse, #}
    {% set dlg_spt_frm= '' %}

    {% extends "./layouts/dialog.html.j2" %}
    {% block base_blc_head_js %}
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    {% endblock base_blc_head_js %}
    {% block base_blc_head_css %}
    <style>
        .item-exist {
            background: coral;
        }

        .item-remove {
            color: firebrick;
        }

        .item-none {
            color: darkgrey;
        }

        .column_sep_new {
            background-color: azure;
        }
    </style>
    {% endblock base_blc_head_css %}

    {% block dlg_blc_body %}
    {% block frm_blc_above %}
    {% endblock frm_blc_above %}

    <div id="grid_container" class="ag-theme-quartz" style="height: 500px"></div>

    {% block frm_blc_below %}
    {% endblock frm_blc_below %}

    {% endblock dlg_blc_body %}

    {% block dlg_blc_javascript %}
    <script>
        const itemNone = '{{ itemNone }}';
        const itemRemove = '{{ itemRemove }}';
        const usersSep = {{ usersSep | tojson }};
        const usedList = usersSep.map(item => item.sep)
        const initialList = {{ sepList | tojson }};
        const ignoreList = [itemRemove, itemNone]
        let selectList = [...initialList];
        let assignedList = []
        window.addEventListener('beforeunload', (event) => {
            if (assignedList.length > 0) {
                event.preventDefault();
                event.returnValue = '';
            }
        });

        const sortList = (lst) => lst.sort((a, b) => a.localeCompare(b));

        const need_refresh = (api, value) => {
            console.log(`need_refrshhecking 'item-exist': ${value} <- ${assignedList.includes(value)}`);
            if (assignedList.includes(value)) {
                setTimeout(() => { api.refreshCells({ columns: ['sep'], force: true }) }, 0)
            }
        };
        const gridOptions = {
            rowData: usersSep
            , columnDefs: [
                { field: "id", flex: 1, hide: true },
                { field: "name", headerName: "Sectorista", flex: 1 },
                {
                    field: "sep",
                    headerName: "SEP Atual",
                    flex: 2,
                    cellClassRules: {
                        'item-none': params => params.value === itemNone,
                        'item-exist': params => {
                            console.log(`Checking 'item-exist': ${params.value} <- ${assignedList.includes(params.value)}`);
                            //params => assignedList.includes(params.value)
                            return assignedList.includes(params.value);
                        },
                    },
                },
                {
                    field: "sep_new",
                    headerName: "Novo SEP",
                    flex: 2,
                    editable: true,
                    cellClass: 'column_sep_new',
                    cellClassRules: {
                        'item-none': params => params.value === itemNone,
                        'item-remove': params => params.value === itemRemove,
                    },
                    cellEditor: 'agSelectCellEditor',
                    cellEditorParams: params => {
                        let lst = [...selectList]
                        if (!lst.includes(params.value) && !ignoreList.includes(params.value)) {
                            lst.push(params.value)
                        }
                        lst = sortList(lst).concat(ignoreList)
                        return { values: lst };
                    },
                    valueSetter: (params) => {
                        const oldValue = params.oldValue;
                        const newValue = params.newValue;
                        if (newValue === oldValue) return false;

                        if (!ignoreList.includes(oldValue)) {
                            selectList.push(oldValue)
                            need_refresh(params.api, oldValue) // remove back-color
                            assignedList = assignedList.filter(item => item !== oldValue);
                        }
                        if (!ignoreList.includes(newValue)) {
                            selectList = selectList.filter(item => item !== newValue);
                            assignedList.push(newValue)
                            need_refresh(params.api, newValue) // set back-color
                        }
                        params.data.sep_new = newValue;
                        return true;
                    }
                },
                { field: "when", headerName: "AtribuÃ­do", flex: 1 }
            ]
        };
        const myGridElement = document.querySelector('#grid_container');

        agGrid.createGrid(myGridElement, gridOptions);
        /*
let rowData = [  initial data  ];

// Initialize the grid
const gridOptions = {
    columnDefs: [
        // Define your columns here
    ],
    rowData: rowData,
    onCellValueChanged: (event) => {
        const updatedNode = event.node.data;
        const index = rowData.findIndex(row => row.id === updatedNode.id);
        if (index > -1) {
            rowData[index] = updatedNode;
        }
    }
};

// Example save function
function saveData() {
    localStorage.setItem('agGridData', JSON.stringify(rowData));
}

// Load saved data
function loadData() {
    const savedData = localStorage.getItem('agGridData');
    if (savedData) {
        rowData = JSON.parse(savedData);
        gridOptions.api.setRowData(rowData);
    }
}

// Initialize grid
const eGridDiv = document.querySelector('#myGrid');
new agGrid.Grid(eGridDiv, gridOptions);

// Load data on page load
loadData();

// Save data before refresh
window.addEventListener('beforeunload', saveData);

        */
    </script>
    {% endblock dlg_blc_javascript %}

    {# eof #}