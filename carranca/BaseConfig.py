"""
 Equipe da Canoa -- 2024

 Configuration Files for the Application

 mgd 2024-05-06
 mgd 2024-05-21: Base, Debug, Production
 mgd 2024-10-11: new file for BaseConfig, simplify imports
"""

# cSpell:ignore SQLALCHEMY searchpath
from hashlib import sha384
from os import path, environ

from .helpers.py_helper import is_str_none_or_empty

from .main import app_name
from .igniter import fuse
from .helpers.wtf_helper import LenValidate

CONFIG_MANDATORY_KEYS = ["SQLALCHEMY_DATABASE_URI", "SERVER_ADDRESS", "SECRET_KEY", "APP_MODE"]

# === Available app/config modes, add yours own mode here (extend)
app_mode_production: str = "Production"  # capital P
app_mode_development: str = "Development"  # capital D


def _get_template_folder():
    from jinja2 import Environment, FileSystemLoader

    # Create a Jinja2 environment using a specific template folder
    env = Environment(loader=FileSystemLoader("templates"))
    # Access the template folder path
    template_folder = env.loader.searchpath[0]
    return template_folder

def _init_envvar_of_config(cfg, fuse):
    """
    Initialize BaseConfig
    from environment variables
    """
    for key, value in environ.items():
        attribute_name = key[len(fuse.envvars_prefix) :]
        if not key.startswith(fuse.envvars_prefix):
            pass
        elif hasattr(cfg, attribute_name):
            value = bool(value) if value.capitalize() in [str(True), str(False)] else value
            if is_str_none_or_empty(value):
                fuse.display.warn(f"Ignoring empty envvar value for key [{key}], keeping original.")
            else:
                setattr(cfg, attribute_name, value)
        elif cfg.APP_DEBUG:
            fuse.display.warn(
                f"[{attribute_name}] is not an attribute of `Config`, will not set envvar value."
            )


# Base Class for App Config
# see https://flask.palletsprojects.com/en/latest/config/ for other attributes
class BaseConfig:
    """
    The Base Configuration Class for the App
    ----------------------------------------

    For the `data_validate` process's
    parameters/configuration see: ./config_upload.py
    """

    """ Environment Variables Helper
        ----------------------------
    """

    def __init__(self):
        from .igniter import fuse
        _init_envvar_of_config(self, fuse)
        fuse.display.info(f"Config {self.APP_MODE} was instantiated.")


    """ App Identification
        ----------------------------
    """
    APP_NAME = app_name

    # major.minor.patch
    APP_VERSION = "Î² 2.36"  # &beta;

    """ Internal attributes
        ------------------
    """
    # min & max text length for pw & user_name
    len_val_for_pw = LenValidate(6, 22)
    len_val_for_uname = LenValidate(3, 22)
    len_val_for_email = LenValidate(8, 60)

    """ Canoa Configurations
        --------------------------
    """
    APP_MODE = "None"  # see below (enum)
    APP_DEBUG = False
    APP_MINIFIED = None  # None = True if DEBUG else False
    APP_DISPLAY_DEBUG_MSG = None  # None = True if DEBUG else False

    """ Flask Configuration
        --------------------------
    """
    # Flask https://flask.palletsprojects.com/en/latest/config/
    DEBUG = False
    TESTING = False
    SECRET_KEY = ""
    APP_DISPLAY_DEBUG_MSG = None  # None = True if DEBUG else False
    SESSION_COOKIE_NAME = f"{APP_NAME.lower()}"
    # APPLICATION_ROOT
    # SEND_FILE_MAX_AGE_DEFAULT = 31536000 # Flask, trying to fix background shakes (CharGPT)

    """ From Environment Variables
        --------------------------
    """
    # Root folder, see process.py
    ROOT_FOLDER = path.abspath(path.dirname(__file__))
    TEMPLATES_FOLDER = _get_template_folder()

    # see route_helper.py[is_external_ip_ready]
    EXTERNAL_IP_SERVICE = "https://checkip.amazonaws.com"

    # Registered user on the email API
    EMAIL_ORIGINATOR = "assismauro@hotmail.com"
    # "  with key
    EMAIL_API_KEY = ""  # from os_environment or autogenerated (see below)

    # Sql Alchemy
    SQLALCHEMY_DATABASE_URI = ""  # from os_environment
    SQLALCHEMY_DATABASE_URI_REMOVE_PW_REGEX = r":[^@]+@"
    SQLALCHEMY_DATABASE_URI_REPLACE_PW_STR = ":******@"
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Flask Server Address
    SERVER_ADDRESS = ""
    DEBUG_FLASK = None

    # if left empty, an external service will be used
    # see self.EXTERNAL_IP_SERVICE
    # & ./helpers/route_helper.py[is_external_ip_ready()]
    SERVER_EXTERNAL_IP = ""
    SERVER_EXTERNAL_PORT = ""


    # initialize special attributes
    def initialize(self):
        def _if_debug(attrib):
            return bool(self.DEBUG if attrib is None else attrib)

        self.APP_MINIFIED = _if_debug(self.APP_MINIFIED)
        self.APP_DISPLAY_DEBUG_MSG = _if_debug(self.APP_DISPLAY_DEBUG_MSG)
        self.APP_DEBUG = _if_debug(self.APP_DEBUG)
        if is_str_none_or_empty(self.SECRET_KEY):
            """
                SECRET_KEY
                used for securely signing the session cookie (mgd: change every version)
                https://flask.palletsprojects.com/en/latest/config/#SECRET_KEY
            """
            unique = f"{BaseConfig.APP_NAME} v{BaseConfig.APP_VERSION}".encode()
            self.SECRET_KEY = sha384(unique).hexdigest()


# eof